//Por exemplo, ao trabalhar com fun√ß√µes, voc√™ pode se deparar com a necessidade de inserir m√∫ltiplos par√¢metros para executar um determinado c√≥digo. Ao utilizar o rest, voc√™ consegue agrupar esses argumentos usando a sintaxe de tr√™s pontos(...). Observe e execute o c√≥digo abaixo:

const countParams = (...args) => {
  console.log('par√¢metros:', args);
  return `Voc√™ passou ${args.length} par√¢metros para a fun√ß√£o.`;
}

console.log(countParams(0, 1, 2)); // Voc√™ passou 3 par√¢metros para a fun√ß√£o.
console.log(countParams('string', null, [1, 2, 3], { })); // Voc√™ passou 4 par√¢metros para a fun√ß√£o.

const sum = (...args) => args.reduce((accumulator, current) => accumulator + current, 0);
console.log(sum(4, 7, 8, 9, 60)); // 88

// No exemplo acima, a fun√ß√£o sum utiliza a HOF reduce para calcular a soma de todos os argumentos passados a ela, independentemente do n√∫mero. Como o par√¢metro rest ‚Äúempacota‚Äù todos os argumentos em um array, podemos utilizar o reduce para somar tudo o que estiver dentro desse array.

// Experimente passar mais n√∫meros como argumento para a fun√ß√£o sum. Voc√™ ver√° que, independentemente do n√∫mero de argumentos passados, a fun√ß√£o ir√° executar a soma. Ao utilizar o rest, suas fun√ß√µes podem ficar mais flex√≠veis quando voc√™ precisa passar m√∫ltiplos par√¢metros, pois n√£o precisa especificar quantos argumentos a fun√ß√£o ir√° receber!

// Anota a√≠ üìù: O spread √© respons√°vel por espalhar valores, e ele pode ser utilizado para passar par√¢metros ao EXECUTAR uma fun√ß√£o. J√° o rest pode ser utilizado para agrupar valores ao DECLARAR fun√ß√µes que podem receber m√∫ltiplos par√¢metros.